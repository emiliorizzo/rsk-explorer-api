generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = ""
}

model abi {
  id               String      @id @db.VarChar
  anonymous        Boolean?
  name             String?     @db.VarChar
  type             String?     @db.VarChar
  abi_input        abi_input[]
  event            event[]
  log_log_abiToabi log[]       @relation("log_abiToabi")
}

model abi_input {
  abiId   String   @map("abi_id") @db.VarChar
  name    String   @db.VarChar
  type    String?  @db.VarChar
  indexed Boolean?
  abi     abi      @relation(fields: [abiId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_abi_input_abi_id")

  @@id([abiId, name], map: "pk_abi_input")
}

model action {
  internalTxId         String               @id @map("internal_tx_id") @db.VarChar
  callType             String?              @map("call_type") @db.VarChar
  creationMethod       String?              @map("creation_method") @db.VarChar
  from                 String?              @db.VarChar(42)
  to                   String?              @db.VarChar(42)
  gas                  String?              @db.VarChar
  input                String?              @db.VarChar
  value                String?              @db.VarChar
  address              String?              @db.VarChar(42)
  refundAddress        String?              @map("refund_address") @db.VarChar(42)
  balance              String?              @db.VarChar
  internal_transaction internal_transaction @relation(fields: [internalTxId], references: [internalTxId], onDelete: Cascade, onUpdate: NoAction, map: "fk_action_internal_tx_id")
}

model address {
  id                                                     Int                  @default(autoincrement())
  address                                                String               @id @db.VarChar(42)
  isNative                                               Boolean              @map("is_native")
  type                                                   String               @db.VarChar
  address_in_event_address_in_event_addressToaddress     address_in_event[]   @relation("address_in_event_addressToaddress")
  address_in_summary_address_in_summary_addressToaddress address_in_summary[] @relation("address_in_summary_addressToaddress")
  balance_balance_addressToaddress                       balance[]            @relation("balance_addressToaddress")
  contract_contract_addressToaddress                     contract?            @relation("contract_addressToaddress")
  event_event_addressToaddress                           event[]              @relation("event_addressToaddress")
  log_log_addressToaddress                               log[]                @relation("log_addressToaddress")
  logged_address_logged_address_addressToaddress         logged_address[]     @relation("logged_address_addressToaddress")
  miner_miner_addressToaddress                           miner[]              @relation("miner_addressToaddress")
  receipt_receipt_fromToaddress                          receipt[]            @relation("receipt_fromToaddress")
  receipt_receipt_toToaddress                            receipt[]            @relation("receipt_toToaddress")
  token_address_token_address_addressToaddress           token_address[]      @relation("token_address_addressToaddress")
  transaction_transaction_fromToaddress                  transaction[]        @relation("transaction_fromToaddress")
  transaction_transaction_toToaddress                    transaction[]        @relation("transaction_toToaddress")

  @@index([id], map: "index_address_id")
}

model address_in_event {
  eventId                                   String  @map("event_id") @db.VarChar
  address                                   String  @db.VarChar(42)
  address_address_in_event_addressToaddress address @relation("address_in_event_addressToaddress", fields: [address], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_address_in_event_address")
  event                                     event   @relation(fields: [eventId], references: [eventId], onDelete: Cascade, onUpdate: NoAction, map: "fk_address_in_event_id")

  @@id([eventId, address], map: "pk_address_in_event")
}

model balance {
  id                                Int     @id @default(autoincrement())
  address                           String  @db.VarChar(42)
  balance                           String  @db.VarChar
  blockNumber                       Int     @map("block_number")
  blockHash                         String  @map("block_hash") @db.VarChar(66)
  timestamp                         String  @db.VarChar
  created                           String  @db.VarChar
  address_balance_addressToaddress  address @relation("balance_addressToaddress", fields: [address], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_balance_address")
  block_balance_block_hashToblock   block   @relation("balance_block_hashToblock", fields: [blockHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_balance_block_hash")
  block_balance_block_numberToblock block   @relation("balance_block_numberToblock", fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_balance_block_number")
}

model block {
  id                                                            String?                @default(dbgenerated("gen_random_uuid()")) @map("_id") @db.Uuid
  number                                                        Int                    @id
  hash                                                          String?                @unique @db.VarChar(66)
  parentHash                                                    String                 @map("parent_hash") @db.VarChar(66)
  sha3Uncles                                                    String                 @map("sha3_uncles") @db.VarChar(66)
  logsBloom                                                     String                 @map("logs_bloom") @db.VarChar
  transactionsRoot                                              String                 @map("transactions_root") @db.VarChar(66)
  stateRoot                                                     String                 @map("state_root") @db.VarChar(66)
  receiptsRoot                                                  String                 @map("receipts_root") @db.VarChar(66)
  difficulty                                                    String                 @db.VarChar
  totalDifficulty                                               String                 @map("total_difficulty") @db.VarChar
  extraData                                                     String                 @map("extra_data") @db.VarChar
  size                                                          Int
  gasLimit                                                      Int                    @map("gas_limit")
  gasUsed                                                       Int                    @map("gas_used")
  timestamp                                                     String                 @db.VarChar
  minimumGasPrice                                               String                 @map("minimum_gas_price") @db.VarChar
  bitcoinMergedMiningHeader                                     String                 @map("bitcoin_merged_mining_header") @db.VarChar
  bitcoinMergedMiningCoinbaseTransaction                        String                 @map("bitcoin_merged_mining_coinbase_transaction") @db.VarChar
  bitcoinMergedMiningMerkleProof                                String                 @map("bitcoin_merged_mining_merkle_proof") @db.VarChar
  hashForMergedMining                                           String                 @map("hash_for_merged_mining") @db.VarChar(66)
  paidFees                                                      String                 @map("paid_fees") @db.VarChar
  cumulativeDifficulty                                          String                 @map("cumulative_difficulty") @db.VarChar
  received                                                      String                 @db.VarChar
  balance_balance_block_hashToblock                             balance[]              @relation("balance_block_hashToblock")
  balance_balance_block_numberToblock                           balance[]              @relation("balance_block_numberToblock")
  block_summary_block_summary_hashToblock                       block_summary?         @relation("block_summary_hashToblock")
  block_summary_block_summary_numberToblock                     block_summary[]        @relation("block_summary_numberToblock")
  block_trace                                                   block_trace[]
  contract                                                      contract[]
  event_event_block_hashToblock                                 event[]                @relation("event_block_hashToblock")
  event_event_block_numberToblock                               event[]                @relation("event_block_numberToblock")
  internal_transaction_internal_transaction_block_hashToblock   internal_transaction[] @relation("internal_transaction_block_hashToblock")
  internal_transaction_internal_transaction_block_numberToblock internal_transaction[] @relation("internal_transaction_block_numberToblock")
  log_log_block_hashToblock                                     log[]                  @relation("log_block_hashToblock")
  log_log_block_numberToblock                                   log[]                  @relation("log_block_numberToblock")
  miner                                                         miner?
  receipt_receipt_block_hashToblock                             receipt[]              @relation("receipt_block_hashToblock")
  receipt_receipt_block_numberToblock                           receipt[]              @relation("receipt_block_numberToblock")
  stats_stats_block_hashToblock                                 stats[]                @relation("stats_block_hashToblock")
  stats_stats_block_numberToblock                               stats?                 @relation("stats_block_numberToblock")
  token_address_token_address_block_hashToblock                 token_address[]        @relation("token_address_block_hashToblock")
  token_address                                                 token_address[]
  total_supply                                                  total_supply[]
  transaction_transaction_block_hashToblock                     transaction[]          @relation("transaction_block_hashToblock")
  transaction_transaction_block_numberToblock                   transaction[]          @relation("transaction_block_numberToblock")
  uncle                                                         uncle[]
}

model contract {
  address                                        String                @id @db.VarChar(42)
  name                                           String?               @db.VarChar
  code                                           String?               @db.VarChar
  codeStoredAtBlock                              Int?                  @map("code_stored_at_block")
  deployedCode                                   String?               @map("deployed_code") @db.VarChar
  symbol                                         String?               @db.VarChar
  decimals                                       Int?                  @db.SmallInt
  address_contract_addressToaddress              address               @relation("contract_addressToaddress", fields: [address], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_contract_address")
  block                                          block?                @relation(fields: [codeStoredAtBlock], references: [number], onDelete: Cascade, map: "fk_contract_code_stored_at_block")
  contract_creation_tx                           contract_creation_tx?
  contract_interface                             contract_interface[]
  contract_method                                contract_method[]
  token_address_token_address_contractTocontract token_address[]       @relation("token_address_contractTocontract")
  total_supply                                   total_supply[]
}

model contract_interface {
  interface       String   @db.VarChar
  contractAddress String   @map("contract_address") @db.VarChar(42)
  contract        contract @relation(fields: [contractAddress], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_contract_interface_contract_address")

  @@id([interface, contractAddress], map: "pk_contract_interface")
}

model contract_method {
  method          String   @db.VarChar
  contractAddress String   @map("contract_address") @db.VarChar(42)
  contract        contract @relation(fields: [contractAddress], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_contract_method_contract_address")

  @@id([method, contractAddress], map: "pk_contract_method")
}

model contract_verification {
  id        String   @id @map("_id") @db.VarChar
  address   String?  @db.VarChar
  error     String?  @db.VarChar
  match     Boolean?
  request   String?  @db.VarChar
  result    String?  @db.VarChar
  timestamp String?  @db.VarChar
}

model event {
  eventId                         String             @id @map("event_id") @db.VarChar
  abiId                           String             @map("abi_id") @db.VarChar
  transactionHash                 String             @map("transaction_hash") @db.VarChar(66)
  address                         String             @db.VarChar(42)
  blockHash                       String             @map("block_hash") @db.VarChar(66)
  blockNumber                     Int                @map("block_number")
  data                            String             @db.VarChar
  event                           String?            @db.VarChar
  logIndex                        Int                @map("log_index")
  signature                       String?            @db.VarChar
  timestamp                       String             @db.VarChar
  transactionIndex                Int                @map("transaction_index")
  txStatus                        String             @map("tx_status") @db.VarChar
  address_in_event                address_in_event[]
  abi                             abi                @relation(fields: [abiId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_abi_id")
  address_event_addressToaddress  address            @relation("event_addressToaddress", fields: [address], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_address")
  block_event_block_hashToblock   block              @relation("event_block_hashToblock", fields: [blockHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_block_hash")
  block_event_block_numberToblock block              @relation("event_block_numberToblock", fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_block_number")
  transaction                     transaction        @relation(fields: [transactionHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_transaction_hash")
  event_arg                       event_arg[]
  event_in_summary                event_in_summary[]
  event_topic                     event_topic[]
}

model event_arg {
  id      Int     @id @default(autoincrement())
  eventId String? @map("event_id") @db.VarChar
  arg     String? @db.VarChar
  event   event?  @relation(fields: [eventId], references: [eventId], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_arg_id")
}

model event_topic {
  eventId String @map("event_id") @db.VarChar
  topic   String @db.VarChar
  event   event  @relation(fields: [eventId], references: [eventId], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_topic_id")

  @@id([eventId, topic], map: "pk_event_topic")
}

model internal_transaction {
  internalTxId                                   String                            @id @map("internal_tx_id") @db.VarChar
  transactionHash                                String                            @map("transaction_hash") @db.VarChar(66)
  blockNumber                                    Int                               @map("block_number")
  blockHash                                      String                            @map("block_hash") @db.VarChar(66)
  transactionPosition                            Int                               @map("transaction_position")
  type                                           String                            @db.VarChar
  subtraces                                      Int
  index                                          Int
  timestamp                                      String                            @db.VarChar
  error                                          String?                           @db.VarChar
  action                                         action?
  block_trace                                    block_trace[]
  block_internal_transaction_block_hashToblock   block                             @relation("internal_transaction_block_hashToblock", fields: [blockHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_internal_transaction_block_hash")
  block_internal_transaction_block_numberToblock block                             @relation("internal_transaction_block_numberToblock", fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_internal_transaction_block_number")
  transaction                                    transaction                       @relation(fields: [transactionHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_internal_transaction_transaction_hash")
  internal_transaction_in_summary                internal_transaction_in_summary[]
  internal_transaction_result                    internal_transaction_result?
  suicide_in_summary                             suicide_in_summary[]
  trace_address                                  trace_address[]
}

model internal_transaction_result {
  internalTxId         String               @id @map("internal_tx_id") @db.VarChar
  gasUsed              String?              @map("gas_used") @db.VarChar
  output               String?              @db.VarChar
  address              String?              @db.VarChar
  code                 String?              @db.VarChar
  internal_transaction internal_transaction @relation(fields: [internalTxId], references: [internalTxId], onDelete: Cascade, onUpdate: NoAction, map: "fk_action_internal_tx_id")
}

model log {
  logIndex                      Int              @map("log_index")
  transactionHash               String           @map("transaction_hash") @db.VarChar(66)
  transactionIndex              Int              @map("transaction_index")
  blockNumber                   Int              @map("block_number")
  blockHash                     String           @map("block_hash") @db.VarChar(66)
  address                       String           @db.VarChar(42)
  abi                           String?          @db.VarChar
  data                          String?          @db.VarChar
  signature                     String?          @db.VarChar
  event                         String?          @db.VarChar
  timestamp                     String?          @db.VarChar
  txStatus                      String?          @map("tx_status") @db.VarChar
  eventId                       String?          @map("event_id") @db.VarChar
  abi_log_abiToabi              abi?             @relation("log_abiToabi", fields: [abi], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_abi")
  address_log_addressToaddress  address          @relation("log_addressToaddress", fields: [address], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_address")
  block_log_block_hashToblock   block            @relation("log_block_hashToblock", fields: [blockHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_block_hash")
  block_log_block_numberToblock block            @relation("log_block_numberToblock", fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_block_number")
  transaction                   receipt          @relation(fields: [transactionHash], references: [transactionHash], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_transaction_hash")
  log_arg                       log_arg[]
  log_topic                     log_topic[]
  logged_address                logged_address[]

  @@id([logIndex, transactionHash], map: "pk_log")
}

model log_arg {
  id              Int     @default(autoincrement())
  logIndex        Int     @map("log_index")
  arg             String? @db.VarChar
  transactionHash String  @map("transaction_hash") @db.VarChar
  log             log     @relation(fields: [logIndex, transactionHash], references: [logIndex, transactionHash], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_arg_log_index_transaction_hash")

  @@id([id, logIndex, transactionHash], map: "pk_log_arg")
}

model log_topic {
  logIndex        Int    @map("log_index")
  topicIndex      Int    @map("topic_index")
  topic           String @db.VarChar
  transactionHash String @map("transaction_hash") @db.VarChar
  log             log    @relation(fields: [logIndex, transactionHash], references: [logIndex, transactionHash], onDelete: Cascade, onUpdate: NoAction, map: "fk_log_topic_log_index_transaction_hash")

  @@id([logIndex, topicIndex, topic, transactionHash], map: "pk_log_topic")
}

model logged_address {
  logIndex                                Int     @map("log_index")
  address                                 String  @db.VarChar(42)
  transactionHash                         String  @map("transaction_hash") @db.VarChar
  address_logged_address_addressToaddress address @relation("logged_address_addressToaddress", fields: [address], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_logged_address_address")
  log                                     log     @relation(fields: [logIndex, transactionHash], references: [logIndex, transactionHash], onDelete: Cascade, onUpdate: NoAction, map: "fk_logged_address_log_index_transaction_hash")

  @@id([logIndex, address, transactionHash], map: "pk_logged_address")
}

model receipt {
  transactionHash                   String      @id @map("transaction_hash") @db.VarChar(66)
  transactionIndex                  Int         @map("transaction_index")
  blockHash                         String      @map("block_hash") @db.VarChar(66)
  blockNumber                       Int         @map("block_number")
  from                              String      @db.VarChar(42)
  to                                String?     @db.VarChar(42)
  type                              String?     @db.VarChar
  cumulativeGasUsed                 Int         @map("cumulative_gas_used")
  gasUsed                           Int         @map("gas_used")
  contractAddress                   String?     @map("contract_address") @db.VarChar(42)
  status                            String      @db.VarChar
  logsBloom                         String      @map("logs_bloom") @db.VarChar
  log                               log[]
  block_receipt_block_hashToblock   block       @relation("receipt_block_hashToblock", fields: [blockHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_receipt_block_hash")
  block_receipt_block_numberToblock block       @relation("receipt_block_numberToblock", fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_receipt_block_number")
  address_receipt_fromToaddress     address     @relation("receipt_fromToaddress", fields: [from], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_receipt_from")
  address_receipt_toToaddress       address?    @relation("receipt_toToaddress", fields: [to], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_receipt_to")
  transaction                       transaction @relation(fields: [transactionHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_receipt_transaction_hash")
}

model status {
  id               Int     @id @default(autoincrement())
  timestamp        BigInt
  pendingBlocks    Int     @map("pending_blocks")
  requestingBlocks Int     @map("requesting_blocks")
  nodeDown         Boolean @map("node_down")
}

model token_address {
  address                                   String                     @db.VarChar(42)
  contract                                  String                     @db.VarChar(42)
  blockNumber                               Int                        @map("block_number")
  blockHash                                 String                     @map("block_hash") @db.VarChar
  balance                                   String?                    @db.VarChar
  address_token_address_addressToaddress    address                    @relation("token_address_addressToaddress", fields: [address], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_token_address_address")
  block_token_address_block_hashToblock     block                      @relation("token_address_block_hashToblock", fields: [blockHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_token_address_block_hash")
  block                                     block                      @relation(fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_token_address_block_number")
  contract_token_address_contractTocontract contract                   @relation("token_address_contractTocontract", fields: [contract], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_token_address_contract")
  token_address_in_summary                  token_address_in_summary[]

  @@id([address, contract, blockNumber], map: "pk_token_address")
}

model trace_address {
  internalTxId         String               @map("internal_tx_id") @db.VarChar
  index                Int
  trace                Int
  internal_transaction internal_transaction @relation(fields: [internalTxId], references: [internalTxId], onDelete: Cascade, onUpdate: NoAction, map: "fk_trace_address_internal_tx_id")

  @@id([internalTxId, index], map: "pk_trace_address")
}

model transaction {
  hash                                  String                   @id @db.VarChar(66)
  txId                                  String                   @map("tx_id") @db.VarChar
  type                                  String?                  @db.VarChar
  txType                                String                   @map("tx_type") @db.VarChar
  from                                  String                   @db.VarChar(42)
  to                                    String?                  @db.VarChar(42)
  blockNumber                           Int                      @map("block_number")
  blockHash                             String                   @map("block_hash") @db.VarChar(66)
  transactionIndex                      Int                      @map("transaction_index")
  nonce                                 Int
  gas                                   Int
  gasPrice                              String                   @map("gas_price") @db.VarChar
  value                                 String                   @db.VarChar
  input                                 String?                  @db.VarChar
  v                                     String?                  @db.VarChar
  r                                     String?                  @db.VarChar
  s                                     String?                  @db.VarChar
  timestamp                             String                   @db.VarChar
  event                                 event[]
  internal_transaction                  internal_transaction[]
  receipt                               receipt?
  block_transaction_block_hashToblock   block                    @relation("transaction_block_hashToblock", fields: [blockHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_transaction_block_hash")
  block_transaction_block_numberToblock block                    @relation("transaction_block_numberToblock", fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_transaction_block_number")
  address_transaction_fromToaddress     address                  @relation("transaction_fromToaddress", fields: [from], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_transaction_from")
  address_transaction_toToaddress       address?                 @relation("transaction_toToaddress", fields: [to], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_transaction_to")
  transaction_in_summary                transaction_in_summary[]
}

model transaction_in_pool {
  hash             String @db.VarChar(66)
  poolId           Int    @map("pool_id")
  blockHash        String @map("block_hash") @db.VarChar(66)
  from             String @db.VarChar(42)
  to               String @db.VarChar(42)
  blockNumber      Int    @map("block_number")
  transactionIndex Int    @map("transaction_index")
  nonce            Int
  gas              Int
  gasPrice         String @map("gas_price") @db.VarChar
  value            String @db.VarChar
  input            String @db.VarChar
  status           String @db.VarChar
  txpool           txpool @relation(fields: [poolId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_in_pool_pool_id")

  @@id([hash, poolId], map: "pk_transaction_in_pool_hash_poolid")
}

model transaction_pending {
  hash             String @id @db.VarChar(66)
  blockHash        String @map("block_hash") @db.VarChar(66)
  from             String @db.VarChar(42)
  to               String @db.VarChar(42)
  blockNumber      Int    @map("block_number")
  transactionIndex Int    @map("transaction_index")
  nonce            Int
  gas              Int
  gasPrice         String @map("gas_price") @db.VarChar
  value            String @db.VarChar
  input            String @db.VarChar
  status           String @db.VarChar
}

model txpool {
  id                  Int                   @id @default(autoincrement())
  blockNumber         Int                   @map("block_number")
  pending             Int
  queued              Int
  timestamp           String                @db.VarChar
  transaction_in_pool transaction_in_pool[]
}

model uncle {
  hash        String @id @db.VarChar(66)
  blockNumber Int    @map("block_number")
  block       block  @relation(fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_uncle_block_number")
}

model verification_result {
  id        String   @id @map("_id") @db.VarChar
  abi       String?  @db.VarChar
  address   String?  @db.VarChar
  match     Boolean?
  request   String?  @db.VarChar
  result    String?  @db.VarChar
  sources   String?  @db.VarChar
  timestamp String?  @db.VarChar
}

model stats {
  blockNumber                     Int     @id @map("block_number")
  blockHash                       String  @map("block_hash") @db.VarChar
  activeAccounts                  Int     @map("active_accounts")
  hashrate                        String  @db.VarChar
  circulatingSupply               String? @map("circulating_supply") @db.VarChar
  totalSupply                     Int?    @map("total_supply")
  bridgeBalance                   String? @map("bridge_balance") @db.VarChar
  lockingCap                      String? @map("locking_cap") @db.VarChar
  timestamp                       String  @db.VarChar
  block_stats_block_hashToblock   block   @relation("stats_block_hashToblock", fields: [blockHash], references: [hash], onDelete: Cascade, map: "fk_stats_block_hash")
  block_stats_block_numberToblock block   @relation("stats_block_numberToblock", fields: [blockNumber], references: [number], onDelete: Cascade, map: "fk_stats_block_number")
}

model block_trace {
  blockHash            String               @map("block_hash") @db.VarChar(66)
  internalTxId         String               @map("internal_tx_id") @db.VarChar
  block                block                @relation(fields: [blockHash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_block_trace_block_hash")
  internal_transaction internal_transaction @relation(fields: [internalTxId], references: [internalTxId], onDelete: Cascade, onUpdate: NoAction, map: "fk_block_trace_internal_tx_id")

  @@id([blockHash, internalTxId], map: "pk_block_trace")
}

model address_in_summary {
  address                                     String        @db.VarChar(42)
  summaryId                                   String        @map("summary_id") @db.VarChar
  address_address_in_summary_addressToaddress address       @relation("address_in_summary_addressToaddress", fields: [address], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_address_in_summary_address")
  block_summary                               block_summary @relation(fields: [summaryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_address_in_summary_summary_id")

  @@id([address, summaryId], map: "pk_address_in_summary")
}

model block_summary {
  id                                String                            @id @db.VarChar
  hash                              String                            @unique @db.VarChar
  number                            Int
  timestamp                         Int
  address_in_summary                address_in_summary[]
  block_block_summary_hashToblock   block                             @relation("block_summary_hashToblock", fields: [hash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_block_summary_hash")
  block_block_summary_numberToblock block                             @relation("block_summary_numberToblock", fields: [number], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_block_summary_number")
  event_in_summary                  event_in_summary[]
  internal_transaction_in_summary   internal_transaction_in_summary[]
  suicide_in_summary                suicide_in_summary[]
  token_address_in_summary          token_address_in_summary[]
  transaction_in_summary            transaction_in_summary[]
}

model event_in_summary {
  eventId       String        @map("event_id") @db.VarChar
  summaryId     String        @map("summary_id") @db.VarChar
  event         event         @relation(fields: [eventId], references: [eventId], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_in_summary_event_id")
  block_summary block_summary @relation(fields: [summaryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_event_in_summary_summary_id")

  @@id([eventId, summaryId], map: "pk_event_in_summary")
}

model internal_transaction_in_summary {
  internalTxId         String               @map("internal_tx_id") @db.VarChar
  summaryId            String               @map("summary_id") @db.VarChar
  internal_transaction internal_transaction @relation(fields: [internalTxId], references: [internalTxId], onDelete: Cascade, onUpdate: NoAction, map: "fk_internal_transaction_in_summary_internal_tx_id")
  block_summary        block_summary        @relation(fields: [summaryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_internal_transaction_in_summary_summary_id")

  @@id([internalTxId, summaryId], map: "pk_internal_transaction_in_summary")
}

model suicide_in_summary {
  internalTxId         String               @map("internal_tx_id") @db.VarChar
  summaryId            String               @map("summary_id") @db.VarChar
  internal_transaction internal_transaction @relation(fields: [internalTxId], references: [internalTxId], onDelete: Cascade, onUpdate: NoAction, map: "fk_suicide_in_summary_internal_tx_id")
  block_summary        block_summary        @relation(fields: [summaryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_suicide_in_summary_summary_id")

  @@id([internalTxId, summaryId], map: "pk_suicide_in_summary")
}

model token_address_in_summary {
  address       String        @db.VarChar
  contract      String        @db.VarChar
  block         Int
  summaryId     String        @map("summary_id") @db.VarChar
  token_address token_address @relation(fields: [address, contract, block], references: [address, contract, blockNumber], onDelete: Cascade, onUpdate: NoAction, map: "fk_token_address_in_memory_address_contract_block")
  block_summary block_summary @relation(fields: [summaryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_token_address_in_memory_summary_id")

  @@id([address, contract, block, summaryId], map: "pk_token_address_in_summary")
}

model transaction_in_summary {
  hash          String        @db.VarChar
  summaryId     String        @map("summary_id") @db.VarChar
  transaction   transaction   @relation(fields: [hash], references: [hash], onDelete: Cascade, onUpdate: NoAction, map: "fk_transaction_in_summary_hash")
  block_summary block_summary @relation(fields: [summaryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_transaction_in_summary_summary_id")

  @@id([hash, summaryId], map: "pk_transaction_in_summary")
}

model miner {
  address                        String  @db.VarChar
  blockNumber                    Int     @unique @map("block_number")
  address_miner_addressToaddress address @relation("miner_addressToaddress", fields: [address], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_miner_address")
  block                          block   @relation(fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_miner_block_number")

  @@id([address, blockNumber], map: "pk_miner")
}

model total_supply {
  contractAddress String   @map("contract_address") @db.VarChar(42)
  blockNumber     Int      @map("block_number")
  totalSupply     String   @map("total_supply") @db.VarChar
  contract        contract @relation(fields: [contractAddress], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_total_supply_address")
  block           block    @relation(fields: [blockNumber], references: [number], onDelete: Cascade, onUpdate: NoAction, map: "fk_total_supply_number")

  @@id([contractAddress, blockNumber], map: "pk_total_supply")
}

model contract_verifier_solc_versions {
  id            String  @id @db.VarChar
  builds        String? @db.VarChar
  latestRelease String? @map("latest_release") @db.VarChar
  releases      String? @db.VarChar
}

model explorer_initial_config {
  id              String  @id @db.VarChar
  nativeContracts String? @map("native_contracts") @db.VarChar
  net             String? @db.VarChar
}

model explorer_settings {
  id   String @id @db.VarChar
  hash String @db.VarChar
}

model contract_creation_tx {
  contractAddress String   @map("contract_address") @id @db.VarChar
  timestamp        String?  @db.VarChar
  tx               String?  @db.VarChar
  contract         contract @relation(fields: [contractAddress], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "fk_contract_creation_tx_contract_address")
}
